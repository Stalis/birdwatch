// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: cpu.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CpuClient is the client API for Cpu service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CpuClient interface {
	GetCpuCurrentStat(ctx context.Context, in *CpuCurrentStatRequest, opts ...grpc.CallOption) (*CpuCurrentStatResponse, error)
}

type cpuClient struct {
	cc grpc.ClientConnInterface
}

func NewCpuClient(cc grpc.ClientConnInterface) CpuClient {
	return &cpuClient{cc}
}

func (c *cpuClient) GetCpuCurrentStat(ctx context.Context, in *CpuCurrentStatRequest, opts ...grpc.CallOption) (*CpuCurrentStatResponse, error) {
	out := new(CpuCurrentStatResponse)
	err := c.cc.Invoke(ctx, "/cpu.Cpu/GetCpuCurrentStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CpuServer is the server API for Cpu service.
// All implementations must embed UnimplementedCpuServer
// for forward compatibility
type CpuServer interface {
	GetCpuCurrentStat(context.Context, *CpuCurrentStatRequest) (*CpuCurrentStatResponse, error)
	mustEmbedUnimplementedCpuServer()
}

// UnimplementedCpuServer must be embedded to have forward compatible implementations.
type UnimplementedCpuServer struct {
}

func (UnimplementedCpuServer) GetCpuCurrentStat(context.Context, *CpuCurrentStatRequest) (*CpuCurrentStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCpuCurrentStat not implemented")
}
func (UnimplementedCpuServer) mustEmbedUnimplementedCpuServer() {}

// UnsafeCpuServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CpuServer will
// result in compilation errors.
type UnsafeCpuServer interface {
	mustEmbedUnimplementedCpuServer()
}

func RegisterCpuServer(s grpc.ServiceRegistrar, srv CpuServer) {
	s.RegisterService(&Cpu_ServiceDesc, srv)
}

func _Cpu_GetCpuCurrentStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CpuCurrentStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpuServer).GetCpuCurrentStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpu.Cpu/GetCpuCurrentStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpuServer).GetCpuCurrentStat(ctx, req.(*CpuCurrentStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cpu_ServiceDesc is the grpc.ServiceDesc for Cpu service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cpu_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cpu.Cpu",
	HandlerType: (*CpuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCpuCurrentStat",
			Handler:    _Cpu_GetCpuCurrentStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpu.proto",
}
